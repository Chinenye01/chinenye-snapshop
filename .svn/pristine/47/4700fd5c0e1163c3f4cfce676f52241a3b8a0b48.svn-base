/**
 * TCSS 305 Winter 2019
 * 
 * Assignment 4: SnapShop
 */
package gui;

import filters.EdgeDetectFilter;
import filters.EdgeHighlightFilter;
import filters.Filter;
import filters.FlipHorizontalFilter;
import filters.FlipVerticalFilter;
import filters.GrayscaleFilter;
import filters.SharpenFilter;
import filters.SoftenFilter;
import image.PixelImage;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *This class that will add the filters to the pictures 
 *to change it and  also it will SAVEAS, OPEN and CLOSE image .
 * 
 * @author Chinenye Ezenwoye    chinenye@uw.edu.
 * 
 * @version 2   February 22, 2019.
 */
public class SnapShopGUI {
    
    
    
    /** 
     * This is will store the JFrama as instant field 
     */
    private final JFrame myFrame;
    
    /** 
     * This is the JPanel that will be used 
     * on JFrame and contain filter buttons. 
     */
    private JPanel myNorthPanel;
    
    /** 
     *  This is the JLabel that can to be used on JFrame and contain image. 
     */
    private JLabel myCenterLabel;
    
    /** 
     * This is the JPanel to be used for the contain option buttons. 
     */
    private JPanel mySouthPanel;
    
    /** 
     * This is the button to open file to be selected.
     */
    private JButton myOpenButton;
    
    /** 
     * This is the button to open the saveAs file. 
     */
    private JButton mySaveButton;
    
    /** 
     * This is the button to close the current image. 
     */
    private JButton myCloseButton;
    
    /** 
     * This is the JFileChooser to open open and saveAs dialog. 
     */
    private final JFileChooser myFileChooser;
    
    /** 
     * This is a JFileChooser integer representation. 
     */
    private int myResult;
    
    /** 
     * This is an image file to display on the screen. 
     */
    private PixelImage myImage;
    
    /** 
     * This file will contains the name of selected image.
     */
    private File myFile;
    
    /**
     *  This is a list of all the filters that will be used. 
     */
    private final List<Filter> myFilterList;
    
    /** 
     * This is the list with all the buttons that will be used. 
     */
    private final List<JButton> myButtonList;
    
    
    /** 
     * This is the numbers of filters buttons. 
     */
    private static final int NUM_OF_FILTERS = 7;
    
    /** 
     * This will be the size dimensions for the JFrame. 
     */
    private static final Dimension DEFAULT_SIZE = new Dimension(736, 110);
    
    
    /**
     *  This is the constants to capture screen dimensions
     */
    
    
    /** 
     * This is a ToolKit. 
     */
    private static final Toolkit KIT = Toolkit.getDefaultToolkit();
    
    /** 
     * This will set the Dimension of the screen. 
     */
    private static final Dimension SCREEN_SIZE = KIT.getScreenSize();
    
    /** 
     * This will set the width of the screen. 
     */
    private static final int SCREEN_WIDTH = SCREEN_SIZE.width;
    
    /** 
     * This will set the height of the screen. 
     */
    private static final int SCREEN_HEIGHT = SCREEN_SIZE.height;
    
    /**
     * This will create the constructors for the 
     *  GUI interface with frame and creates buttons by 
     *  setting the size of the frame from default size of the screen 
     *  to change to the size of the image frame.
     */
    public SnapShopGUI() {
        
        myFrame = new JFrame("SnapShop");
        myFileChooser = new JFileChooser(".");
        
        myFilterList = new ArrayList<Filter>();
        myButtonList = new ArrayList<JButton>();
        
        myFrame.setMinimumSize(DEFAULT_SIZE);
        
        myFrame.setLocation(SCREEN_WIDTH / 2 - myFrame.getWidth() / 2, 
                    SCREEN_HEIGHT / 2 - myFrame.getHeight() / 2);
        
        setupComponents();
        createFilterButtons();
        createOptButtons();
    }
    
    /**
     *  This method that performs all necessary work 
     *  to create and show the GUI on the screen by calling them. 
     */
    public void start() {
        
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myFrame.setVisible(true);
        myFrame.pack();
    }
    
    /**
     * This method sets up main components of the frame like 
     * where the buttons should be placed in the frame.
     */
    private void setupComponents() {
        
        final JPanel Panel = new JPanel(new BorderLayout());
        myNorthPanel = new JPanel(new FlowLayout());
        mySouthPanel = new JPanel(new FlowLayout());
        
        myCenterLabel = new JLabel();
        myCenterLabel.setHorizontalAlignment(JLabel.CENTER);
        myCenterLabel.setVerticalAlignment(JLabel.CENTER);
        
        Panel.add(myNorthPanel, BorderLayout.NORTH);
        Panel.add(mySouthPanel, BorderLayout.SOUTH);
        Panel.add(myCenterLabel, BorderLayout.CENTER);
        
        myFrame.add(Panel, BorderLayout.CENTER);
        
    }
    
    
    /**
     * This method will add the filter button so that the 
     * filter can be implemented when the 
     * button is pressed.
     */
    private void createFilterButtons() {

        myFilterList.add(new EdgeDetectFilter());
        myFilterList.add(new EdgeHighlightFilter());
        myFilterList.add(new FlipHorizontalFilter());
        myFilterList.add(new FlipVerticalFilter());
        myFilterList.add(new GrayscaleFilter());
        myFilterList.add(new SharpenFilter());
        myFilterList.add(new SoftenFilter());

        for (int i = 0; i < NUM_OF_FILTERS; i++) {
            
            myButtonList.add(i, createFilterButton(myFilterList.get(i)));
            myNorthPanel.add(myButtonList.get(i));
        }
    }
    
    /**
     * A method to create a button and assign specific filter to it.
     * 
     * @param theFilter A specific filter for a button.
     * @return button with a assign filter.
     */
    private JButton createFilterButton(final Filter theFilter) {
        final JButton button = new JButton(theFilter.getDescription());
        
        class FilterActionListener implements ActionListener {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                
                theFilter.filter(myImage);
                myCenterLabel.setIcon(new ImageIcon(myImage));
                myFrame.pack();
            }
        }
        
        button.addActionListener(new FilterActionListener());
        button.setEnabled(false);
        
        return button;
    }
    
    /**
     * This method opens supported image file and display it and let you 
     * select the image and save the image if you want you save the changes.
     */
    private void createOpenButtonAction() {
        myResult = myFileChooser.showOpenDialog(myFrame);
        
        if (myResult == JFileChooser.APPROVE_OPTION) {
            myFile = myFileChooser.getSelectedFile();
            
            try {
                myImage = PixelImage.load(myFile);
                myCenterLabel.setIcon(new ImageIcon(myImage));
                mySaveButton.setEnabled(true);
                myCloseButton.setEnabled(true);
                
                for (int i = 0; i < NUM_OF_FILTERS; i++) {
                    myButtonList.get(i).setEnabled(true);
                }
            
            } catch (final IOException e) {
                JOptionPane.showMessageDialog(null, "The selected " + myFile.getName() 
                                              + " file did not contain an image!");
            }
            
            
            myFrame.setMinimumSize(DEFAULT_SIZE);
            myFrame.pack();
            
            myFrame.setMinimumSize(new Dimension(myFrame.getWidth(), myFrame.getHeight()));
            
            myFrame.setLocation(SCREEN_WIDTH / 2 - myFrame.getWidth() / 2, 
                                SCREEN_HEIGHT / 2 - myFrame.getHeight() / 2);
        }
    }

 
    /**
     * This method creates option buttons:
     * For the Open/Save/Close/Undo.
     */
    private void createOptButtons() {
        
        myOpenButton = new JButton("Open...");
        mySaveButton = new JButton("Save As...");
        mySaveButton.setEnabled(false);
        myCloseButton = new JButton("Close Image");
        myCloseButton.setEnabled(false);
        
        mySouthPanel.add(myOpenButton);
        mySouthPanel.add(mySaveButton);
        mySouthPanel.add(myCloseButton);
        
        myOpenButton.addActionListener(new OptionActionListener());
        mySaveButton.addActionListener(new OptionActionListener());
        myCloseButton.addActionListener(new OptionActionListener());
    }
    
    
    /**
     * Inner class that creates ActionListener for option buttons.
     */
    class OptionActionListener implements ActionListener {
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            
            myFile = myFileChooser.getSelectedFile();
            
            /**
             * This will handle the OPEN button action.
             */
            if (theEvent.getSource() == myOpenButton) {
                
                createOpenButtonAction();
            }
            
            /**
             * This will handle the SAVEAS button action.
             */
            if (theEvent.getSource() == mySaveButton) {
                
                myResult  = myFileChooser.showSaveDialog(null);
                
                if (myResult == JFileChooser.APPROVE_OPTION) {
                    try {
                        myImage.save(myFileChooser.getSelectedFile());
                    
                    } catch (final IOException e) {
                        JOptionPane.showMessageDialog(null, "The file can't be written!");
                    }
                }
            }
            
            /**
             * This will handle the CLOSE button action.
             */
            if (theEvent.getSource() == myCloseButton) {
                myCenterLabel.setIcon(null);
                mySaveButton.setEnabled(false);
                myCloseButton.setEnabled(false);
          
                for (int i = 0; i < NUM_OF_FILTERS; i++) {
                    myButtonList.get(i).setEnabled(false);
                }
                
                myFrame.setMinimumSize(DEFAULT_SIZE);
                myFrame.pack();
                myFrame.setLocation(SCREEN_WIDTH / 2 - myFrame.getWidth() / 2, 
                                    SCREEN_HEIGHT / 2 - myFrame.getHeight() / 2);
            }
        }
        
        
}}